(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{769:function(t,e,a){"use strict";a.r(e);var l=a(66),i=Object(l.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"bean-的定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bean-的定义"}},[t._v("#")]),t._v(" Bean 的定义")]),t._v(" "),a("p",[t._v("  在 Spring 中，构成应用程序主干并由 Spring IoC 容器管理的对象称为 Bean。Bean 是由 Spring IoC 容器实例化、组装和以其他方式管理的对象。")]),t._v(" "),a("p",[t._v("  配置 Bean 的 class 属性，Spring 容器启动的时候使用反射机制调用该类的构造函数创建一个类的对象。")]),t._v(" "),a("h2",{attrs:{id:"需要配置成-bean-的类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#需要配置成-bean-的类"}},[t._v("#")]),t._v(" 需要配置成 Bean 的类")]),t._v(" "),a("p",[t._v("  符合 JavaBean 规范的类以及不符合 JavaBean 规范的 POJO 都可以配置成 Bean。主要包括以下几种：")]),t._v(" "),a("ul",[a("li",[t._v("服务层对象：包括桌面应用中的逻辑功能类，以及 Web MVC 应用中的控制类、服务类。")]),t._v(" "),a("li",[t._v("数据访问对象：和数据库进行操作，对数据进行增删改查的类对象及事务处理的相关类对象。")]),t._v(" "),a("li",[t._v("框架基础对象：例如框架用于注解支持的类和持久化框架整合的基础对象等。")])]),t._v(" "),a("p",[t._v("  Spring 容器主要对对象的生命周期和对依赖关系进行管理。从类的特征上看，具备单例特性的类都适合交由容器管理，依赖关系较为复杂或者依赖会发生变化的类也适合 Spring 进行控管。")]),t._v(" "),a("h2",{attrs:{id:"bean-配置的主要属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bean-配置的主要属性"}},[t._v("#")]),t._v(" Bean 配置的主要属性")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("属性名")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("id")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Bean 的唯一标识，默认类名首字母小写 ，Spring 容器对 Bean 的配置和管理都通过 id 属性完成")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("name")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("name 属性中可以为 Bean 指定多个名称，用逗号或分号隔开")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("class")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("指定 Bean 的具体实现类，必须是一个完整的类名。一般情况下是必要的，实例工厂方式不需要")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("scope")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("设定 Bean 实例的作用域，默认为 singleton")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("factory-method")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("静态工厂和实例工厂配置使用")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("factory-bean")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("实例工厂配置使用")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("init-method")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("初始化方法")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("destory-method")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("销毁方法")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("lazy-init")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("懒加载")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("autowire")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("自动装置")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("parent")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("定义继承")])])])])])}),[],!1,null,null,null);e.default=i.exports}}]);